# -*- coding: utf-8 -*-
"""

Automatically generated by Colaboratory.

"""

# Importing function to delete output in Colab
from google.colab import output

# installing geopandas library
!pip install geopandas
output.clear()

# Importing neccesary libraries

# folium makes it easy to visualize data thatâ€™s been manipulated in 
# Python on an interactive leaflet map.
import folium
from folium import Marker, GeoJson
from folium.plugins import HeatMap

# Read, manipulate and select data
import pandas as pd
import geopandas as gpd

# Reand and Show data 
releases = gpd.read_file("toxic_release_pennsylvania.shp") 
releases.head()

# More data from Philadelphia but air monitoring dataset
stations = gpd.read_file("PhillyHealth_Air_Monitoring_Stations.shp")
stations.head()

"""To measure distance, we need to have the points in the same coordinate reference system (CRS)"""

# using EPSG 2272.
print(stations.crs)
print(releases.crs)

"""In this EPSG the distance will be feet."""

# Select one release incident in particular
recent_release = releases.iloc[360]

# Measure distance from release to each station
distances = stations.geometry.distance(recent_release.geometry)
distances

distances[distances==distances.min()].index[0]

# mean method
print('Mean distance to monitoring stations: {} feet'.format(distances.mean()))

# min method
print('Closest monitoring station ({} feet):'.format(distances.min()))
print(stations.iloc[distances.idxmin()][["ADDRESS", "LATITUDE", "LONGITUDE"]])

# creating buffer of 2 miles (2*5280 feet) around
two_mile_buffer = stations.geometry.buffer(2*5280)
two_mile_buffer.head()

# Create map with release incidents and monitoring stations
m = folium.Map(location = [39.9526,-75.1652], 
               zoom_start = 11)
HeatMap(data = releases[['LATITUDE', 'LONGITUDE']],
        radius = 15).add_to(m)

# set markers
for idx, row in stations.iterrows():
    Marker([row['LATITUDE'], row['LONGITUDE']]).add_to(m)
    
# Plot each polygon on the map
GeoJson(two_mile_buffer.to_crs(epsg = 4326)).add_to(m)

# Show the map
m

"""To check if a toxic release occurred within 2 miles of any monitoring station, we are going to collapse the polygons and verify if the point of every station is in the new polygons."""

# Turn group of polygons into single multipolygon
my_union = two_mile_buffer.geometry.unary_union
print('Type:', type(my_union))

# Show the MultiPolygon object
my_union

# The closest station is less than two miles away
my_union.contains(releases.iloc[360].geometry)

# The closest station is more than two miles away
my_union.contains(releases.iloc[358].geometry)
